PARSER_BEGIN(Parser)
package parser;
public class Parser {
    public static void main(String[] args) throws Throwable {
        Parser parser = new Parser(new java.io.FileInputStream("HelloWorld.chef"));
        Parser.Start();
        System.out.println(ParserTokenManager.curLexState);
    }
}
PARSER_END(Parser)

// Assumptions when unspecified in the main Chef specification
// Tabs are treated the same as spaces
// The comments paragraph does not necessarily need to end with a full stop
// Spaces are not permitted before mandatory fullstops

<DEFAULT> TOKEN: {
    <END_OF_RECIPE_TITLE: <FULLSTOP><BLANKLINE> > : PRE_METHOD_STATE
}

// State to process comments and "scan" for the next state
<PRE_METHOD_STATE> TOKEN: {
    < COMMENT_CHAR: ~["\n", "\r"] > |
    < INGREDIENTS: "Ingredients." > : INGREDIENTS_STATE |
    < COOKING_TIME: "Cooking" (<SPACE>)+ "time:" > : COOKING_TIME_STATE |
    < PREHEAT: "Pre-heat" (<SPACE>)+ "oven" (<SPACE>)+ "to" > : OVEN_TEMP_STATE |
    < METHOD: "Method." > : METHOD_STATE
}

<INGREDIENTS_STATE> TOKEN: {
    <MEASURE_TYPE: "heaped" | "level"> |
    <DRY_MEASURE: "g" | "kg" | "pinch"("es")?> |
    <WET_MEASURE: "ml" | "l" | "dash"("es")?> |
    <UNSPECIFIED_MEASURE: "cup" | "cups" | "teaspoon"("s")? | "tablespoon"("s")? > |
    < END_OF_INGREDIENTS: <BLANKLINE> > : PRE_METHOD_STATE
}

<COOKING_TIME_STATE> TOKEN: {
    < TIME_UNIT: "hour"("s")? | "minute"("s")? > |
    < END_OF_COOKING_TIME: <BLANKLINE> > : PRE_METHOD_STATE
}

<OVEN_TEMP_STATE> TOKEN: {
    < TEMP_UNIT: "degrees" (<SPACE>)+ "Celsius" > |
    < GAS_MARK: "(gas" (<SPACE>)+ "mark" > |
    < CLOSE_PAREN: ")" > |
    < END_OF_OVEN_TEMP: <BLANKLINE> >
}

<METHOD_STATE> TOKEN: {
    < TAKE: "Take" > |
    < PUT: "Put" > |

    < FROM: "from" > |
    < INTO: "into" > |
    < TO: "to" > |
    < THE: "the" > |

    < FRIDGE: "refrigerator" > |
    < MIXING_BOWL: "mixing" (<SPACE>)+ "bowl" >
}

<INGREDIENTS_STATE, COOKING_TIME_STATE, OVEN_TEMP_STATE> TOKEN: {
    < NUMBER: (["0"-"9"])+ | (["0"-"9"])*"."(["0"-"9"])+ >
}
<DEFAULT, COOKING_TIME_STATE, OVEN_TEMP_STATE> TOKEN: {
    < FULLSTOP: "." >
}
<DEFAULT, INGREDIENTS_STATE, METHOD_STATE> TOKEN: {
    < CHAR: ~["\n", "\r", " ", "\t"] >
}
<*> TOKEN: {
    // When possible, spaces are grabbed as a part of EOL tokens as those spaces are never useful and it simplifies the grammar
    < EOL: (<SPACE>)? ("\r\n" | "\n") (<SPACE>)? > |
    // Also, we match as many spaces as possible since the number of spaces is never relevant
    < SPACE: (" " | "\t")+ > |
    < BLANKLINE: <EOL>(<EOL>)+ >
}

// These "generic" tokens should be matched last, thus they are at the end

void Start() :
{}
{
    (<SPACE>)?

    // Recipe Title
    (<CHAR>)+ (<SPACE> (<CHAR>)+)* <END_OF_RECIPE_TITLE>

    // Comments
    ((<COMMENT_CHAR>)* <BLANKLINE>)?

    // Ingredients
    (
        <INGREDIENTS><EOL>
        (
            (<NUMBER> <SPACE>)?
            (LOOKAHEAD(IngredientMeasureToken()) IngredientMeasureToken())?
            IngredientNameToken() (IngredientNameToken() | <SPACE>)* (<EOL> | <END_OF_INGREDIENTS>)
            /* When END_OF_INGREDIENTS is matched, the lexical state will change to PRE_METHOD_STATE
               which cannot match NUMBER so the ingredients list will necessarily end */
        )*
    )?

    // Cooking Time
    (
        <COOKING_TIME> <SPACE>
        <NUMBER>
        (<SPACE> <TIME_UNIT>)?
        <FULLSTOP>
        <END_OF_COOKING_TIME>
    )?

    // Oven Temperature
    (
        <PREHEAT> <SPACE>
        <NUMBER> <SPACE>
        <TEMP_UNIT>
        (<SPACE> <GAS_MARK> <SPACE> <NUMBER> <CLOSE_PAREN>)?
        <FULLSTOP>
        <END_OF_OVEN_TEMP>
    )?

    <EOF>
}

void IngredientMeasureToken():
{}
{
    (<MEASURE_TYPE> (<SPACE>)+)? (<UNSPECIFIED_MEASURE> | <DRY_MEASURE> | <WET_MEASURE>) (<SPACE>)+
}

// Just match any token, it doesn't really matter - reserved keywords should not be relevant
// Not matching <INGREDIENTS> though because fullstops should not be in ingredient names
void IngredientNameToken():
{}
{
    <CHAR>  | <MEASURE_TYPE> | <DRY_MEASURE> | <WET_MEASURE> | <UNSPECIFIED_MEASURE>
}
