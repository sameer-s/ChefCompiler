/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package parser;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x48L) != 0L)
         {
            jjmatchedKind = 2;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x48L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 2;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa1_1(0x8L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_1(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa4_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
static private int jjMoveStringLiteralDfa4_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_1(active0, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
static private int jjMoveStringLiteralDfa5_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x48L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
static private int jjMoveStringLiteralDfa6_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
static private int jjMoveStringLiteralDfa7_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
static private int jjMoveStringLiteralDfa8_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
static private int jjMoveStringLiteralDfa9_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
static private int jjMoveStringLiteralDfa10_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_1(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
static private int jjMoveStringLiteralDfa11_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(11, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 49;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddTwoStates(32, 38); }
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(4, 10); }
                  }
                  break;
               case 2:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 3:
                  if (curChar == 58 && kind > 4)
                     kind = 4;
                  break;
               case 15:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 17:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 26:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 30:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(4, 10); }
                  break;
               case 31:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 32:
               case 35:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if (curChar == 13)
                     { jjCheckNAdd(32); }
                  break;
               case 36:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(20, 22); }
                  break;
               case 38:
               case 46:
                  if (curChar == 10)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 39:
               case 41:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 40:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 43:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 44:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(36, 39); }
                  break;
               case 45:
                  if (curChar == 13)
                     { jjCheckNAdd(38); }
                  break;
               case 47:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(32, 38); }
                  break;
               case 48:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(0, 3); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 2)
                     kind = 2;
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 111 && kind > 5)
                     kind = 5;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 2)
                     kind = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 46:
         return jjStartNfaWithStates_0(0, 27, 31);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(40, 46); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(47, 50); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddTwoStates(14, 20); }
                  if (curChar == 46)
                     { jjCheckNAddStates(51, 53); }
                  break;
               case 31:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(51, 53); }
                  else if (curChar == 10)
                     { jjCheckNAddStates(54, 56); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(51, 53); }
                  break;
               case 2:
                  if (curChar == 10)
                     { jjCheckNAddStates(54, 56); }
                  break;
               case 3:
               case 5:
                  if (curChar != 10)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(57, 59); }
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  { jjCheckNAddStates(60, 63); }
                  break;
               case 7:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(64, 66); }
                  break;
               case 8:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(67, 70); }
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
                  if (curChar == 10)
                     { jjCheckNAddStates(54, 56); }
                  break;
               case 11:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 12:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(40, 46); }
                  break;
               case 13:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 14:
               case 17:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 13)
                     { jjCheckNAdd(14); }
                  break;
               case 18:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 20:
               case 28:
                  if (curChar == 10)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 21:
               case 23:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 22:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(83, 86); }
                  break;
               case 25:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(87, 89); }
                  break;
               case 26:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(90, 93); }
                  break;
               case 27:
                  if (curChar == 13)
                     { jjCheckNAdd(20); }
                  break;
               case 29:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(14, 20); }
                  break;
               case 30:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(47, 50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_5(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fc0000L) != 0L)
         {
            jjmatchedKind = 28;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fc0000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1bc0000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x1340000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_5(int pos, long active0){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa1_5(0x80000L);
      case 84:
         return jjMoveStringLiteralDfa1_5(0x40000L);
      case 102:
         return jjMoveStringLiteralDfa1_5(0x100000L);
      case 105:
         return jjMoveStringLiteralDfa1_5(0x200000L);
      case 114:
         return jjMoveStringLiteralDfa1_5(0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0xc00000L);
      default :
         return jjMoveNfa_5(10, 0);
   }
}
static private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_5(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_5(active0, 0x1000000L);
      case 104:
         return jjMoveStringLiteralDfa2_5(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa2_5(active0, 0x200000L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_5(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa2_5(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
static private int jjMoveStringLiteralDfa2_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         break;
      case 102:
         return jjMoveStringLiteralDfa3_5(active0, 0x1000000L);
      case 107:
         return jjMoveStringLiteralDfa3_5(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa3_5(active0, 0x100000L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         return jjMoveStringLiteralDfa3_5(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
static private int jjMoveStringLiteralDfa3_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         break;
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         break;
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(3, 21);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0);
}
static private int jjMoveStringLiteralDfa4_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0);
}
static private int jjMoveStringLiteralDfa5_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa6_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(4, active0);
}
static private int jjMoveStringLiteralDfa6_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(5, active0);
}
static private int jjMoveStringLiteralDfa7_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa8_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(6, active0);
}
static private int jjMoveStringLiteralDfa8_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(7, active0);
}
static private int jjMoveStringLiteralDfa9_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa10_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(8, active0);
}
static private int jjMoveStringLiteralDfa10_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa11_5(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_5(9, active0);
}
static private int jjMoveStringLiteralDfa11_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(11, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_5(10, active0);
}
static private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(40, 46); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(47, 50); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddTwoStates(14, 20); }
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 11:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                     kind = 28;
                  break;
               case 12:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(40, 46); }
                  break;
               case 13:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 14:
               case 17:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 13)
                     { jjCheckNAdd(14); }
                  break;
               case 18:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 20:
               case 28:
                  if (curChar == 10)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 21:
               case 23:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 22:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(83, 86); }
                  break;
               case 25:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(87, 89); }
                  break;
               case 26:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(90, 93); }
                  break;
               case 27:
                  if (curChar == 13)
                     { jjCheckNAdd(20); }
                  break;
               case 29:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(14, 20); }
                  break;
               case 30:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(47, 50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (kind > 28)
                     kind = 28;
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 108 && kind > 25)
                     kind = 25;
                  break;
               case 3:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 16);
      case 46:
         return jjStartNfaWithStates_4(0, 27, 25);
      default :
         return jjMoveNfa_4(14, 0);
   }
}
static private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
static private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     { jjCheckNAddStates(96, 98); }
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(99, 108); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(109, 115); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddStates(116, 118); }
                  else if (curChar == 46)
                     { jjCheckNAdd(25); }
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(119, 120); }
                  break;
               case 16:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(121, 122); }
                  break;
               case 23:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 46)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(25); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(96, 98); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 24); }
                  break;
               case 29:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(99, 108); }
                  break;
               case 30:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(123, 125); }
                  break;
               case 31:
               case 39:
                  if (curChar == 10)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 32:
               case 34:
                  if (curChar != 10)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(129, 131); }
                  break;
               case 33:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(132, 135); }
                  break;
               case 36:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(136, 138); }
                  break;
               case 37:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(139, 142); }
                  break;
               case 38:
                  if (curChar == 13)
                     { jjCheckNAdd(31); }
                  break;
               case 40:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  break;
               case 41:
               case 44:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if (curChar == 13)
                     { jjCheckNAdd(41); }
                  break;
               case 45:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(146, 148); }
                  break;
               case 47:
               case 55:
                  if (curChar == 10)
                     { jjCheckNAddStates(149, 151); }
                  break;
               case 48:
               case 50:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(152, 154); }
                  break;
               case 49:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(155, 158); }
                  break;
               case 52:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(159, 161); }
                  break;
               case 53:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(162, 165); }
                  break;
               case 54:
                  if (curChar == 13)
                     { jjCheckNAdd(47); }
                  break;
               case 56:
                  if (curChar == 13)
                     { jjCheckNAddStates(116, 118); }
                  break;
               case 57:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(109, 115); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 115 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 107)
                     kind = 15;
                  break;
               case 18:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 22:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 46:
         return jjStartNfaWithStates_3(0, 27, 12);
      default :
         return jjMoveNfa_3(4, 0);
   }
}
static private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 45;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     { jjCheckNAddStates(166, 168); }
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(169, 178); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(179, 185); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddStates(186, 188); }
                  else if (curChar == 46)
                     { jjCheckNAdd(12); }
                  break;
               case 11:
                  if (curChar == 46)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(166, 168); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(14); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 11); }
                  break;
               case 16:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(169, 178); }
                  break;
               case 17:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(189, 191); }
                  break;
               case 18:
               case 26:
                  if (curChar == 10)
                     { jjCheckNAddStates(192, 194); }
                  break;
               case 19:
               case 21:
                  if (curChar != 10)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddStates(195, 197); }
                  break;
               case 20:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAddStates(198, 201); }
                  break;
               case 23:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(202, 204); }
                  break;
               case 24:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(205, 208); }
                  break;
               case 25:
                  if (curChar == 13)
                     { jjCheckNAdd(18); }
                  break;
               case 27:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(209, 211); }
                  break;
               case 28:
               case 31:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(29); }
                  break;
               case 30:
                  if (curChar == 13)
                     { jjCheckNAdd(28); }
                  break;
               case 32:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(212, 214); }
                  break;
               case 34:
               case 42:
                  if (curChar == 10)
                     { jjCheckNAddStates(215, 217); }
                  break;
               case 35:
               case 37:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(218, 220); }
                  break;
               case 36:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(221, 224); }
                  break;
               case 39:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(225, 227); }
                  break;
               case 40:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(228, 231); }
                  break;
               case 41:
                  if (curChar == 13)
                     { jjCheckNAdd(34); }
                  break;
               case 43:
                  if (curChar == 13)
                     { jjCheckNAddStates(186, 188); }
                  break;
               case 44:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(179, 185); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar != 114)
                     break;
                  kind = 12;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if (curChar == 115)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar != 101)
                     break;
                  kind = 12;
                  { jjCheckNAdd(1); }
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 45 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(5, 0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xfffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(232, 241); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAddStates(242, 248); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddStates(249, 251); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     { jjCheckNAddStates(252, 254); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(31); }
                  break;
               case 30:
                  if (curChar == 46)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0xfffffffeffffd9ffL & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(252, 254); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAdd(34); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(35, 30); }
                  break;
               case 60:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(232, 241); }
                  break;
               case 61:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(255, 257); }
                  break;
               case 62:
               case 70:
                  if (curChar == 10)
                     { jjCheckNAddStates(258, 260); }
                  break;
               case 63:
               case 65:
                  if (curChar != 10)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(261, 263); }
                  break;
               case 64:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(264, 267); }
                  break;
               case 67:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(268, 270); }
                  break;
               case 68:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(271, 274); }
                  break;
               case 69:
                  if (curChar == 13)
                     { jjCheckNAdd(62); }
                  break;
               case 71:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(275, 277); }
                  break;
               case 72:
               case 75:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(73); }
                  break;
               case 74:
                  if (curChar == 13)
                     { jjCheckNAdd(72); }
                  break;
               case 76:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(76); }
                  break;
               case 77:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(278, 280); }
                  break;
               case 78:
               case 86:
                  if (curChar == 10)
                     { jjCheckNAddStates(281, 283); }
                  break;
               case 79:
               case 81:
                  if (curChar != 10)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(284, 286); }
                  break;
               case 80:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(287, 290); }
                  break;
               case 83:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(291, 293); }
                  break;
               case 84:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(294, 297); }
                  break;
               case 85:
                  if (curChar == 13)
                     { jjCheckNAdd(78); }
                  break;
               case 87:
                  if (curChar == 13)
                     { jjCheckNAddStates(249, 251); }
                  break;
               case 88:
                  if (curChar != 10)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(242, 248); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (kind > 28)
                     kind = 28;
                  if (curChar == 116)
                     { jjAddStates(298, 299); }
                  else if (curChar == 99)
                     { jjAddStates(300, 301); }
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 108)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 103)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 100 && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 108 && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
               case 12:
                  if (curChar == 103 && kind > 8)
                     kind = 8;
                  break;
               case 13:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar != 104)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 15:
                  if (curChar == 115 && kind > 8)
                     kind = 8;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 108 && kind > 9)
                     kind = 9;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108 && kind > 9)
                     kind = 9;
                  break;
               case 24:
                  if (curChar != 104)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 25:
                  if (curChar == 115 && kind > 9)
                     kind = 9;
                  break;
               case 26:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (kind > 28)
                     kind = 28;
                  break;
               case 36:
                  if (curChar == 99)
                     { jjAddStates(300, 301); }
                  break;
               case 37:
                  if (curChar == 112 && kind > 10)
                     kind = 10;
                  break;
               case 38:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
               case 44:
                  if (curChar == 115 && kind > 10)
                     kind = 10;
                  break;
               case 40:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 116)
                     { jjAddStates(298, 299); }
                  break;
               case 43:
               case 51:
                  if (curChar != 110)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 40, 41, 44, 31, 34, 35, 36, 37, 45, 46, 2, 7, 15, 22, 17, 
   19, 31, 34, 35, 37, 45, 46, 40, 41, 44, 40, 41, 42, 43, 40, 41, 
   42, 43, 40, 41, 43, 40, 41, 44, 13, 16, 17, 18, 19, 27, 28, 15, 
   22, 23, 26, 1, 9, 10, 4, 5, 8, 4, 5, 6, 7, 4, 5, 6, 
   7, 4, 5, 7, 4, 5, 8, 13, 16, 17, 19, 27, 28, 22, 23, 26, 
   22, 23, 24, 25, 22, 23, 24, 25, 22, 23, 25, 22, 23, 26, 1, 5, 
   27, 28, 24, 30, 38, 39, 40, 43, 44, 45, 46, 54, 55, 33, 34, 42, 
   49, 50, 53, 37, 31, 41, 47, 1, 8, 16, 20, 30, 38, 39, 33, 34, 
   37, 33, 34, 35, 36, 33, 34, 35, 36, 33, 34, 36, 33, 34, 37, 40, 
   43, 44, 46, 54, 55, 49, 50, 53, 49, 50, 51, 52, 49, 50, 51, 52, 
   49, 50, 52, 49, 50, 53, 14, 15, 11, 17, 25, 26, 27, 30, 31, 32, 
   33, 41, 42, 20, 21, 29, 36, 37, 40, 24, 18, 28, 34, 17, 25, 26, 
   20, 21, 24, 20, 21, 22, 23, 20, 21, 22, 23, 20, 21, 23, 20, 21, 
   24, 27, 30, 31, 33, 41, 42, 36, 37, 40, 36, 37, 38, 39, 36, 37, 
   38, 39, 36, 37, 39, 36, 37, 40, 61, 69, 70, 71, 74, 75, 76, 77, 
   85, 86, 64, 65, 73, 80, 81, 84, 68, 62, 72, 78, 34, 35, 30, 61, 
   69, 70, 64, 65, 68, 64, 65, 66, 67, 64, 65, 66, 67, 64, 65, 67, 
   64, 65, 68, 71, 74, 75, 77, 85, 86, 80, 81, 84, 80, 81, 82, 83, 
   80, 81, 82, 83, 80, 81, 83, 80, 81, 84, 50, 59, 38, 41, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\111\156\147\162\145\144\151\145\156\164\163\56", null, null, 
"\115\145\164\150\157\144\56", null, null, null, null, null, null, null, null, null, "\51", null, 
"\124\141\153\145", "\120\165\164", "\146\162\157\155", "\151\156\164\157", "\164\157", 
"\164\150\145", "\162\145\146\162\151\147\145\162\141\164\157\162", null, null, "\56", null, 
null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 89; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "PRE_METHOD_STATE",
   "INGREDIENTS_STATE",
   "COOKING_TIME_STATE",
   "OVEN_TEMP_STATE",
   "METHOD_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, -1, 2, 3, 4, 5, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[89];
    static private final int[] jjstateSet = new int[2 * 89];

    
    static protected char curChar;
}
