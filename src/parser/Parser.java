/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
public class Parser implements ParserConstants {
    public static void main(String[] args) throws Throwable {
        Parser parser = new Parser(new java.io.FileInputStream("HelloWorld.chef"));
        Parser.Start();
    }

// These "generic" tokens should be matched last, thus they are at the end
  static final public 
void Start() throws ParseException {System.out.println("Warning: did you regenerate parser?");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SPACE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SPACE);
    }
    label_2:
    while (true) {
      jj_consume_token(CHAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SPACE:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      label_4:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
      }
      label_5:
      while (true) {
        jj_consume_token(CHAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
      }
    }
    jj_consume_token(FULLSTOP);
    BlankLine();
ParserTokenManager.SwitchTo(COMMENTS_STATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case SPACE:{
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:{
          jj_consume_token(CHAR);
          break;
          }
        case SPACE:{
          jj_consume_token(SPACE);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
      }
      BlankLine();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
ParserTokenManager.SwitchTo(INGREDIENTS_STATE);
System.out.println(1);
    jj_consume_token(INGREDIENTS);
System.out.println(2);
    jj_consume_token(EOL);
System.out.println(3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MEASURE_TYPE:
    case DRY_MEASURE:
    case WET_MEASURE:
    case UNSPECIFIED_MEASURE:
    case NUMBER:
    case CHAR:
    case EOL:{
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MEASURE_TYPE:
        case DRY_MEASURE:
        case WET_MEASURE:
        case UNSPECIFIED_MEASURE:
        case NUMBER:
        case CHAR:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          jj_consume_token(NUMBER);
          label_8:
          while (true) {
            jj_consume_token(SPACE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SPACE:{
              ;
              break;
              }
            default:
              jj_la1[9] = jj_gen;
              break label_8;
            }
          }
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        if (jj_2_1(2147483647)) {
          IngredientMeasureToken();
        } else {
          ;
        }
        IngredientNameToken();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MEASURE_TYPE:
          case DRY_MEASURE:
          case WET_MEASURE:
          case UNSPECIFIED_MEASURE:
          case CHAR:
          case SPACE:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_9;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MEASURE_TYPE:
          case DRY_MEASURE:
          case WET_MEASURE:
          case UNSPECIFIED_MEASURE:
          case CHAR:{
            IngredientNameToken();
            break;
            }
          case SPACE:{
            jj_consume_token(SPACE);
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(EOL);
      }
      label_10:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
ParserTokenManager.SwitchTo(COOKING_TIME_STATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COOKING_TIME:{
      jj_consume_token(COOKING_TIME);
      label_11:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SPACE:{
        label_12:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SPACE:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_12;
          }
        }
        jj_consume_token(TIME_UNIT);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(FULLSTOP);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_13;
        }
        jj_consume_token(SPACE);
      }
      BlankLine();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
ParserTokenManager.SwitchTo(OVEN_TEMP_STATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PREHEAT:{
      jj_consume_token(PREHEAT);
      label_14:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_14;
        }
      }
      jj_consume_token(NUMBER);
      label_15:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_15;
        }
      }
      jj_consume_token(TEMP_UNIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SPACE:{
        label_16:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SPACE:{
            ;
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            break label_16;
          }
        }
        jj_consume_token(GAS_MARK);
        label_17:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SPACE:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_17;
          }
        }
        jj_consume_token(NUMBER);
        jj_consume_token(CLOSE_PAREN);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(FULLSTOP);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_18;
        }
        jj_consume_token(SPACE);
      }
      BlankLine();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
ParserTokenManager.SwitchTo(METHOD_STATE);

    jj_consume_token(0);
  }

// Matches at least one blank line (two newlines)
  static final public void BlankLine() throws ParseException {
    jj_consume_token(EOL);
    label_19:
    while (true) {
      jj_consume_token(EOL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_19;
      }
    }
  }

  static final public void IngredientMeasureToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MEASURE_TYPE:{
      jj_consume_token(MEASURE_TYPE);
      label_20:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_20;
        }
      }
      jj_consume_token(UNSPECIFIED_MEASURE);
      break;
      }
    case DRY_MEASURE:{
      jj_consume_token(DRY_MEASURE);
      break;
      }
    case WET_MEASURE:{
      jj_consume_token(WET_MEASURE);
      label_21:
      while (true) {
        jj_consume_token(SPACE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SPACE:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_21;
        }
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Just match any token, it doesn't really matter - reserved keywords should not be relevant
// Not matching <INGREDIENTS> though because fullstops should not be in ingredient names
  static final public void IngredientNameToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case MEASURE_TYPE:{
      jj_consume_token(MEASURE_TYPE);
      break;
      }
    case DRY_MEASURE:{
      jj_consume_token(DRY_MEASURE);
      break;
      }
    case WET_MEASURE:{
      jj_consume_token(WET_MEASURE);
      break;
      }
    case UNSPECIFIED_MEASURE:{
      jj_consume_token(UNSPECIFIED_MEASURE);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(WET_MEASURE)) return true;
    Token xsp;
    if (jj_scan_token(25)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(25)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(MEASURE_TYPE)) return true;
    Token xsp;
    if (jj_scan_token(25)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(25)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(UNSPECIFIED_MEASURE)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x800000,0x2000000,0x2000000,0x800000,0x2800000,0x2800000,0x2800000,0xa0003c,0x2000000,0x200000,0x280003c,0x280003c,0x1000000,0x1a0003c,0x2000000,0x2000000,0x2000000,0x2000000,0x40,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x100,0x1000000,0x2000000,0x2000000,0x1c,0x80003c,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
